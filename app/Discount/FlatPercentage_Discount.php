<?php

namespace AIO_WooDiscount\Discount;

defined('ABSPATH') || exit;

use AIO_WooDiscount\Discount\Condition\Conditions;

class FlatPercentage_Discount
{
    public function __construct()
    {
        // Always runs on cart update, AJAX or not
        add_action('woocommerce_cart_calculate_fees', [$this, 'maybe_apply_discount'], 20);
        add_filter('woocommerce_coupon_message', [$this, 'suppress_coupon_message'], 100, 3);
        add_filter('woocommerce_coupon_error', [$this, 'suppress_coupon_message'], 100, 3);
    }

    public function maybe_apply_discount($cart)
    {
        if (is_admin() && !defined('DOING_AJAX')) return;
        if (!$cart || $cart->is_empty()) return;

        $rules = $this->get_discount_rules();
        if (empty($rules)) return;

        $matched = false;

        foreach ($rules as $rule) {
            if (
                !isset($rule['discountType']) ||
                strtolower($rule['discountType']) !== 'flat/percentage' ||
                ($rule['status'] ?? '') !== 'on'
            ) {
                continue;
            }

            // ✅ Schedule check
            if (!$this->is_schedule_active($rule)) continue;

            // ✅ Usage limit
            if (!$this->check_usage_limit($rule)) continue;

            // ✅ Condition check
            if (
                isset($rule['enableConditions']) && $rule['enableConditions'] &&
                !Conditions::check_all($cart, $rule['conditions'], $rule['conditionsApplies'] ?? 'all')
            ) {
                continue;
            }

            // ✅ Calculate discount
            $fp_type        = $rule['fpDiscountType'] ?? 'fixed';
            $discount_value = floatval($rule['discountValue'] ?? 0);
            $max_value      = isset($rule['maxValue']) ? floatval($rule['maxValue']) : null;

            $cart_total          = $cart->get_subtotal();
            $calculated_discount = ($fp_type === 'percentage')
                ? ($cart_total * ($discount_value / 100))
                : $discount_value;

            if ($max_value !== null) {
                $calculated_discount = min($calculated_discount, $max_value);
            }

            if ($calculated_discount > 0) {
                $this->create_or_update_coupon($rule, $calculated_discount);
                $cart->apply_coupon($rule['couponName']);
                error_log("✅ Coupon applied via AJAX: {$rule['couponName']}");
                $matched = true;
                break;
            }
        }

        // ❌ If no match, remove our coupons
        if (!$matched) {
            foreach ($cart->get_applied_coupons() as $code) {
                $coupon = new \WC_Coupon($code);
                if ($coupon->get_meta('aio_is_hidden_coupon')) {
                    $cart->remove_coupon($code);
                    error_log("❌ Coupon removed via AJAX: {$code}");
                }
            }
        }
    }

    private function create_or_update_coupon($rule, $amount)
    {
        $coupon_code = $rule['couponName'];
        $coupon = new \WC_Coupon($coupon_code);
        $discount_type = ($rule['fpDiscountType'] ?? 'fixed') === 'percentage' ? 'percent' : 'fixed_cart';

        if (!$coupon->get_id()) {
            $coupon = new \WC_Coupon();
            $coupon->set_code($coupon_code);
            $coupon->set_discount_type($discount_type);
            $coupon->set_amount($amount);
            $coupon->set_individual_use(false);
            $coupon->set_usage_limit(999999);
            $coupon->set_description(__('Auto-generated by AIO WooDiscount', 'aio-woodiscount'));
            $coupon->update_meta_data('aio_rule_id', $rule['id']);
            $coupon->update_meta_data('aio_is_hidden_coupon', true);
            $coupon->save();
        } else {
            $coupon->set_amount($amount);
            $coupon->save();
        }
    }

    private function get_discount_rules(): array
    {
        return maybe_unserialize(get_option('aio_flatpercentage_discount', [])) ?: [];
    }

    private function is_schedule_active($rule): bool
    {
        if (!isset($rule['schedule']['enableSchedule']) || !$rule['schedule']['enableSchedule']) {
            return true;
        }

        $now   = current_time('timestamp');
        $start = strtotime($rule['schedule']['startDate'] ?? '');
        $end   = strtotime($rule['schedule']['endDate'] ?? '');

        return ($now >= $start && $now <= $end);
    }

    private function check_usage_limit($rule): bool
    {
        if (!isset($rule['usageLimits']['enableUsage']) || !$rule['usageLimits']['enableUsage']) {
            return true;
        }

        $limit = intval($rule['usageLimits']['usageLimitsCount'] ?? 0);
        $used  = intval($rule['usedCount'] ?? 0);

        return $used < $limit;
    }

    public function suppress_coupon_message($message, $message_code, $coupon)
    {
        if ($coupon instanceof \WC_Coupon && $coupon->get_meta('aio_is_hidden_coupon')) {
            return ''; // Suppress message for auto-generated hidden coupons
        }

        return $message; // Show default for others
    }
}
